// Automatically generated by MockGen. DO NOT EDIT!
// Source: frizz.io/flux (interfaces: DispatcherInterface,NotifierInterface,AppInterface,WatcherInterface)

package mock_flux

import (
	flux "frizz.io/flux"
	gomock "github.com/golang/mock/gomock"
)

// Mock of DispatcherInterface interface
type MockDispatcherInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockDispatcherInterfaceRecorder
}

// Recorder for MockDispatcherInterface (not exported)
type _MockDispatcherInterfaceRecorder struct {
	mock *MockDispatcherInterface
}

func NewMockDispatcherInterface(ctrl *gomock.Controller) *MockDispatcherInterface {
	mock := &MockDispatcherInterface{ctrl: ctrl}
	mock.recorder = &_MockDispatcherInterfaceRecorder{mock}
	return mock
}

func (_m *MockDispatcherInterface) EXPECT() *_MockDispatcherInterfaceRecorder {
	return _m.recorder
}

func (_m *MockDispatcherInterface) Dispatch(_param0 flux.ActionInterface) chan struct{} {
	ret := _m.ctrl.Call(_m, "Dispatch", _param0)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

func (_mr *_MockDispatcherInterfaceRecorder) Dispatch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dispatch", arg0)
}

// Mock of NotifierInterface interface
type MockNotifierInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockNotifierInterfaceRecorder
}

// Recorder for MockNotifierInterface (not exported)
type _MockNotifierInterfaceRecorder struct {
	mock *MockNotifierInterface
}

func NewMockNotifierInterface(ctrl *gomock.Controller) *MockNotifierInterface {
	mock := &MockNotifierInterface{ctrl: ctrl}
	mock.recorder = &_MockNotifierInterfaceRecorder{mock}
	return mock
}

func (_m *MockNotifierInterface) EXPECT() *_MockNotifierInterfaceRecorder {
	return _m.recorder
}

func (_m *MockNotifierInterface) Notify(_param0 interface{}, _param1 flux.Notif) chan struct{} {
	ret := _m.ctrl.Call(_m, "Notify", _param0, _param1)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

func (_mr *_MockNotifierInterfaceRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify", arg0, arg1)
}

func (_m *MockNotifierInterface) NotifyWithData(_param0 interface{}, _param1 flux.Notif, _param2 interface{}) chan struct{} {
	ret := _m.ctrl.Call(_m, "NotifyWithData", _param0, _param1, _param2)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

func (_mr *_MockNotifierInterfaceRecorder) NotifyWithData(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NotifyWithData", arg0, arg1, arg2)
}

// Mock of AppInterface interface
type MockAppInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockAppInterfaceRecorder
}

// Recorder for MockAppInterface (not exported)
type _MockAppInterfaceRecorder struct {
	mock *MockAppInterface
}

func NewMockAppInterface(ctrl *gomock.Controller) *MockAppInterface {
	mock := &MockAppInterface{ctrl: ctrl}
	mock.recorder = &_MockAppInterfaceRecorder{mock}
	return mock
}

func (_m *MockAppInterface) EXPECT() *_MockAppInterfaceRecorder {
	return _m.recorder
}

func (_m *MockAppInterface) Delete(_param0 chan flux.NotifPayload) {
	_m.ctrl.Call(_m, "Delete", _param0)
}

func (_mr *_MockAppInterfaceRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockAppInterface) Dispatch(_param0 flux.ActionInterface) chan struct{} {
	ret := _m.ctrl.Call(_m, "Dispatch", _param0)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

func (_mr *_MockAppInterfaceRecorder) Dispatch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dispatch", arg0)
}

func (_m *MockAppInterface) Watch(_param0 interface{}, _param1 ...flux.Notif) chan flux.NotifPayload {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Watch", _s...)
	ret0, _ := ret[0].(chan flux.NotifPayload)
	return ret0
}

func (_mr *_MockAppInterfaceRecorder) Watch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", _s...)
}

// Mock of WatcherInterface interface
type MockWatcherInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockWatcherInterfaceRecorder
}

// Recorder for MockWatcherInterface (not exported)
type _MockWatcherInterfaceRecorder struct {
	mock *MockWatcherInterface
}

func NewMockWatcherInterface(ctrl *gomock.Controller) *MockWatcherInterface {
	mock := &MockWatcherInterface{ctrl: ctrl}
	mock.recorder = &_MockWatcherInterfaceRecorder{mock}
	return mock
}

func (_m *MockWatcherInterface) EXPECT() *_MockWatcherInterfaceRecorder {
	return _m.recorder
}

func (_m *MockWatcherInterface) Delete(_param0 chan flux.NotifPayload) {
	_m.ctrl.Call(_m, "Delete", _param0)
}

func (_mr *_MockWatcherInterfaceRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockWatcherInterface) Watch(_param0 interface{}, _param1 ...flux.Notif) chan flux.NotifPayload {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Watch", _s...)
	ret0, _ := ret[0].(chan flux.NotifPayload)
	return ret0
}

func (_mr *_MockWatcherInterfaceRecorder) Watch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Watch", _s...)
}
